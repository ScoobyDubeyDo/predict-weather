{"version":3,"sources":["App.js","index.js"],"names":["App","val","useState","city","setCity","temp","setTemp","humidity","setHumidity","feelsLike","setFeelsLike","icon","setIcon","weather","setWeather","description","setDescription","className","onKeyDown","e","cityName","keyCode","fetch","then","json","data","icode","main","feels_like","catch","err","console","log","onChange","target","value","type","placeholder","feels","src","alt","percentage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mKA8GeA,MA5Gf,WACI,IAqBiBC,EArBjB,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAwBF,mBAAS,yBAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAkCN,mBAAS,IAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAwBR,mBAAS,IAAjC,mBAAOS,EAAP,KAAaC,EAAb,KACA,EAA8BV,mBAAS,IAAvC,mBAAOW,EAAP,KAAgBC,EAAhB,KACA,EAAsCZ,mBAAS,IAA/C,mBAAOa,EAAP,KAAoBC,EAApB,KAyEA,OACI,sBAAKC,UAAU,MAAf,UACI,uBACIA,UAAU,YACVC,UA9BO,SAACC,GA5CR,IAACC,EA6CS,KAAdD,EAAEE,SACFC,OA9CKF,EA8CKjB,EA5CV,qDACAiB,EACA,yDA2CKG,MAAK,SAACC,GACH,OAAOA,EAAKA,UAEfD,MAAK,SAACE,GA1CH,IAACC,EA2CDpB,EAAQmB,EAAKE,KAAKtB,MAClBK,EAAae,EAAKE,KAAKC,YACvBpB,EAAYiB,EAAKE,KAAKpB,UACtBK,GA9CCc,EA8CeD,EAAKZ,QAAQ,GAAGF,KA7CtC,oCAAN,OAA2Ce,EAA3C,aA8CYZ,EAAWW,EAAKZ,QAAQ,GAAGc,MAC3BX,EAAeS,EAAKZ,QAAQ,GAAGE,gBAElCc,OAAM,SAACC,GAOJ,OANAxB,EAAQ,wCACRI,EAAa,IACbF,EAAY,IACZI,EAAQ,IACRE,EAAW,IACXE,EAAe,IACRe,QAAQC,IAAI,6BAA8BF,OAUrDG,SAnCS,SAACd,GAClBf,EAAQe,EAAEe,OAAOC,QAmCTA,MAAOhC,EACPiC,KAAK,OACLC,YAAY,SAEhB,sBAAKpB,UAAU,MAAf,UACI,sBAAKA,UAAU,MAAf,UACI,qBAAKA,UAAU,UAAf,UAtEChB,EAsEiCI,EApElC,KAARJ,GACQ,yCAARA,GACQ,0BAARA,EAEOA,EAED,GAAN,OAAUA,EAAV,YA+DQ,8BA3DF,SAACA,GACX,MAAY,KAARA,EACOA,EAED,eAAN,OAAsBA,EAAtB,SAuDcqC,CAAM7B,QAEhB,sBAAKQ,UAAU,MAAf,UACI,qBAAKsB,IAAK5B,EAAM6B,IAAI,KACpB,8BAAM3B,OAEV,sBAAKI,UAAU,OAAf,UACI,8BA1DG,SAAChB,GAChB,MAAY,KAARA,EACOA,EAED,aAAN,OAAoBA,EAApB,KAsDcwC,CAAWlC,KACjB,8BAAMQ,cClG1B2B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.46bd6840.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nfunction App() {\n    const [city, setCity] = useState(\"\");\n    const [temp, setTemp] = useState(\"Enter city name above\");\n    const [humidity, setHumidity] = useState(\"\");\n    const [feelsLike, setFeelsLike] = useState(\"\");\n    const [icon, setIcon] = useState(\"\");\n    const [weather, setWeather] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n\n    // '''''''''''''''''API'''''''''''''''''''\n    const url = (cityName) => {\n        return (\n            \"https://api.openweathermap.org/data/2.5/weather?q=\" +\n            cityName +\n            \"&appid=42b0d83c7194aa0bc85eef7208ca02c0&units=metric\"\n        );\n    };\n    // \"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"ICON\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n    const urlIcon = (icode) => {\n        return `http://openweathermap.org/img/wn/${icode}@2x.png`;\n    };\n    // .......................................\n    const celsius = (val) => {\n        if (\n            val === \"\" ||\n            val === \"City does not exists, Please recheck\" ||\n            val === \"Enter city name above\"\n        ) {\n            return val;\n        } else {\n            return `${val}°C`;\n        }\n    };\n\n    const feels = (val) => {\n        if (val === \"\") {\n            return val;\n        } else {\n            return `feels like: ${val}°C`;\n        }\n    };\n\n    const percentage = (val) => {\n        if (val === \"\") {\n            return val;\n        } else {\n            return `humidity: ${val}%`;\n        }\n    };\n\n    const inputHandler = (e) => {\n        setCity(e.target.value);\n    };\n\n    const getWeather = (e) => {\n        if (e.keyCode === 13) {\n            fetch(url(city))\n                .then((json) => {\n                    return json.json();\n                })\n                .then((data) => {\n                    setTemp(data.main.temp);\n                    setFeelsLike(data.main.feels_like);\n                    setHumidity(data.main.humidity);\n                    setIcon(urlIcon(data.weather[0].icon));\n                    setWeather(data.weather[0].main);\n                    setDescription(data.weather[0].description);\n                })\n                .catch((err) => {\n                    setTemp(\"City does not exists, Please recheck\");\n                    setFeelsLike(\"\");\n                    setHumidity(\"\");\n                    setIcon(\"\");\n                    setWeather(\"\");\n                    setDescription(\"\");\n                    return console.log(\"Entered wrong name of city\", err);\n                });\n        }\n    };\n\n    return (\n        <div className=\"App\">\n            <input\n                className=\"searchBox\"\n                onKeyDown={getWeather}\n                onChange={inputHandler}\n                value={city}\n                type=\"text\"\n                placeholder=\"Here\"\n            />\n            <div className=\"box\">\n                <div className=\"top\">\n                    <div className=\"curTemp\">{celsius(temp)}</div>\n                    <div>{feels(feelsLike)}</div>\n                </div>\n                <div className=\"mid\">\n                    <img src={icon} alt=\"\" />\n                    <div>{weather}</div>\n                </div>\n                <div className=\"down\">\n                    <div>{percentage(humidity)}</div>\n                    <div>{description}</div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}